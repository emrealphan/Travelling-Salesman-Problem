/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proje;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Stroke;
import java.util.StringTokenizer;
import javax.swing.ImageIcon;

public class PathFrame extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    int[][] koordinat = {{733, 526}, {960, 444}, {366, 350}, {1308, 229}, {764, 170}, {534, 232},
    {369, 530}, {1201, 96}, {157, 427},
    {169, 253},
    {329, 214}, {1122, 327}, {1250, 365}, {452, 160}, {341, 448}, {262, 206}, {64, 197}, {600, 177}, {698, 181}, {250, 441},
    {1108, 422}, {88, 49}, {1024, 352}, {1038, 247}, {1172, 221}, {369, 251}, {892, 515}, {956, 140}, {1034, 178}, {1385, 430},
    {799, 602}, {362, 445}, {680, 544}, {259, 123}, {103, 364}, {1303, 141}, {611, 102}, {739, 356}, {134, 46}, {640, 317},
    {328, 151}, {514, 443}, {325, 283}, {959, 389}, {126, 350}, {856, 463}, {1155, 477}, {189, 490}, {1199, 335}, {682, 370},
    {682, 431}, {915, 136}, {1105, 119}, {362, 152}, {798, 108}, {1241, 410}, {709, 38}, {854, 254}, {149, 121}, {819, 202},
    {1044, 125}, {1048, 308}, {1000, 500}, {277, 352}, {1345, 343}, {687, 254}, {470, 94}, {631, 392}, {1090, 192}, {571, 511},
    {594, 252}, {1180, 420}, {1285, 445}, {507, 74}, {1267, 96}, {1378, 199}, {277, 164}, {530, 118}, {874, 549}, {805, 521}, {418, 152}
    };

    public PathFrame() {
        initComponents();
        scaledImage();
        textAreaPaths.setText("Yollar arasında en kısa olanı 1.Yol\n"
                + "en kısa yolların en uzunu 5.Yol'dur.\n");
        textAreaPaths.setEditable(false);
    }
    String[] enKisaYollar = {"1.Yol", "2.Yol", "3.Yol", "4.Yol", "5.Yol"};

    //yollar[] yollar[0]
    public void scaledImage() {
        ImageIcon icon = new ImageIcon("src\\turkiye-iller-3.png");
        //scaling image to fit label
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(mapLabel.getWidth(),
                mapLabel.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        mapLabel.setIcon(scaledIcon);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapLabel = new javax.swing.JLabel();
        secim = new javax.swing.JTextField();
        pathListesi = new java.awt.List();
        okButton = new javax.swing.JButton();
        ekraniTemizle = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaPaths = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        secim.setEditable(false);
        secim.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        secim.setText("İzlenecek yolu seçiniz:");

        pathListesi.add(enKisaYollar[0]);
        pathListesi.add(enKisaYollar[1]);
        pathListesi.add(enKisaYollar[2]);
        pathListesi.add(enKisaYollar[3]);
        pathListesi.add(enKisaYollar[4]);
        pathListesi.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        okButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        okButton.setText("En kısa yolu çiz.");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        ekraniTemizle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ekraniTemizle.setText("Ekranı Temizle");
        ekraniTemizle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ekraniTemizleActionPerformed(evt);
            }
        });

        textAreaPaths.setColumns(20);
        textAreaPaths.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        textAreaPaths.setRows(5);
        jScrollPane1.setViewportView(textAreaPaths);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pathListesi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ekraniTemizle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(secim, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 200, Short.MAX_VALUE)))
                        .addGap(66, 66, 66))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)))
                .addComponent(mapLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(secim, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pathListesi, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton)
                        .addGap(18, 18, 18)
                        .addComponent(ekraniTemizle)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mapLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked

        Graphics g = mapLabel.getGraphics();
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.RED);
        float[] dashingPattern1 = {2f, 2f};
        Stroke stroke1 = new BasicStroke(10f, BasicStroke.CAP_BUTT,
                BasicStroke.JOIN_MITER, 2.0f, dashingPattern1, 2.0f);
        g2d.setStroke(stroke1);

        int[][] arr = new int[100][100];
        int[] sumArr = new int[MainMenu.kisaTut.size()];
        for (int x = 0; x < MainMenu.kisaTut.size(); x++) {
            int indis = 0;
            sumArr[x] = 0;
            for (StringTokenizer stringTokenizer = new StringTokenizer(MainMenu.kisaTut.get(x));
                    stringTokenizer.hasMoreTokens();) {
                String token = stringTokenizer.nextToken();
                arr[x][indis] = Integer.parseInt(token);
                indis++;
                sumArr[x] += 1;
            }
        }
        if (MainMenu.kisaTut.size() == 5) {
            switch (pathListesi.getSelectedIndex()) {
                case 0:
                    textAreaPaths.append("\n1.yol: " + MainMenu.kisaTut.get(0)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(0) + "\n");
                    for (int j = 0; j < sumArr[0]; j++) {
                        g2d.drawLine(koordinat[arr[0][j] - 1][0], koordinat[arr[0][j] - 1][1],
                                koordinat[arr[0][j + 1] - 1][0], koordinat[arr[0][j + 1] - 1][1]);
                    }
                    break;
                case 1:
                    textAreaPaths.append("\n2.yol: " + MainMenu.kisaTut.get(1)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(1) + "\n");
                    for (int j = 0; j < sumArr[1]; j++) {
                        g2d.drawLine(koordinat[arr[1][j] - 1][0], koordinat[arr[1][j] - 1][1],
                                koordinat[arr[1][j + 1] - 1][0], koordinat[arr[1][j + 1] - 1][1]);
                    }
                    break;
                case 2:
                    textAreaPaths.append("\n3.yol: " + MainMenu.kisaTut.get(2)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(2) + "\n");
                    for (int j = 0; j < sumArr[2]; j++) {
                        g2d.drawLine(koordinat[arr[2][j] - 1][0], koordinat[arr[2][j] - 1][1],
                                koordinat[arr[2][j + 1] - 1][0], koordinat[arr[2][j + 1] - 1][1]);
                    }
                    break;
                case 3:
                    textAreaPaths.append("\n4.yol: " + MainMenu.kisaTut.get(3)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(3) + "\n");
                    for (int j = 0; j < sumArr[3]; j++) {
                        g2d.drawLine(koordinat[arr[3][j] - 1][0], koordinat[arr[3][j] - 1][1],
                                koordinat[arr[3][j + 1] - 1][0], koordinat[arr[3][j + 1] - 1][1]);
                    }
                    break;
                case 4:
                    textAreaPaths.append("\n5.yol: " + MainMenu.kisaTut.get(4)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(4) + "\n");
                    for (int j = 0; j < sumArr[4]; j++) {
                        g2d.drawLine(koordinat[arr[4][j] - 1][0], koordinat[arr[4][j] - 1][1],
                                koordinat[arr[4][j + 1] - 1][0], koordinat[arr[4][j + 1] - 1][1]);
                    }
                    break;
                default:
                    System.out.println("çizilemedi");
            }
        } else if (MainMenu.kisaTut.size() == 4) {
            switch (pathListesi.getSelectedIndex()) {
                case 0:
                    textAreaPaths.append("\n1.yol: " + MainMenu.kisaTut.get(0)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(0) + "\n");
                    for (int j = 0; j < sumArr[0]; j++) {
                        g2d.drawLine(koordinat[arr[0][j] - 1][0], koordinat[arr[0][j] - 1][1],
                                koordinat[arr[0][j + 1] - 1][0], koordinat[arr[0][j + 1] - 1][1]);
                    }
                    break;
                case 1:
                    textAreaPaths.append("\n2.yol: " + MainMenu.kisaTut.get(1)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(1) + "\n");
                    for (int j = 0; j < sumArr[1]; j++) {
                        g2d.drawLine(koordinat[arr[1][j] - 1][0], koordinat[arr[1][j] - 1][1],
                                koordinat[arr[1][j + 1] - 1][0], koordinat[arr[1][j + 1] - 1][1]);
                    }
                    break;
                case 2:
                    textAreaPaths.append("\n3.yol: " + MainMenu.kisaTut.get(2)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(2) + "\n");
                    for (int j = 0; j < sumArr[2]; j++) {
                        g2d.drawLine(koordinat[arr[2][j] - 1][0], koordinat[arr[2][j] - 1][1],
                                koordinat[arr[2][j + 1] - 1][0], koordinat[arr[2][j + 1] - 1][1]);
                    }
                    break;
                case 3:
                    textAreaPaths.append("\n4.yol: " + MainMenu.kisaTut.get(3)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(3) + "\n");
                    for (int j = 0; j < sumArr[3]; j++) {
                        g2d.drawLine(koordinat[arr[3][j] - 1][0], koordinat[arr[3][j] - 1][1],
                                koordinat[arr[3][j + 1] - 1][0], koordinat[arr[3][j + 1] - 1][1]);
                    }
                    break;
                case 4:
                    textAreaPaths.append("\n5.yol Bulunmamaktadır. \n");
                    break;
                default:
                    System.out.println("çizilemedi");
            }

        } else if (MainMenu.kisaTut.size() == 3) {
            switch (pathListesi.getSelectedIndex()) {
                case 0:
                    textAreaPaths.append("\n1.yol: " + MainMenu.kisaTut.get(0)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(0) + "\n");
                    for (int j = 0; j < sumArr[0]; j++) {
                        g2d.drawLine(koordinat[arr[0][j] - 1][0], koordinat[arr[0][j] - 1][1],
                                koordinat[arr[0][j + 1] - 1][0], koordinat[arr[0][j + 1] - 1][1]);
                    }
                    break;
                case 1:
                    textAreaPaths.append("\n2.yol: " + MainMenu.kisaTut.get(1)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(1) + "\n");
                    for (int j = 0; j < sumArr[1]; j++) {
                        g2d.drawLine(koordinat[arr[1][j] - 1][0], koordinat[arr[1][j] - 1][1],
                                koordinat[arr[1][j + 1] - 1][0], koordinat[arr[1][j + 1] - 1][1]);
                    }
                    break;
                case 2:
                    textAreaPaths.append("\n3.yol: " + MainMenu.kisaTut.get(2)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(2) + "\n");
                    for (int j = 0; j < sumArr[2]; j++) {
                        g2d.drawLine(koordinat[arr[2][j] - 1][0], koordinat[arr[2][j] - 1][1],
                                koordinat[arr[2][j + 1] - 1][0], koordinat[arr[2][j + 1] - 1][1]);
                    }
                    break;
                case 3:
                    textAreaPaths.append("\n4.yol Bulunmamaktadır. \n");
                    break;
                case 4:
                    textAreaPaths.append("\n5.yol Bulunmamaktadır. \n");
                    break;
                default:
                    System.out.println("çizilemedi");
            }

        } else if (MainMenu.kisaTut.size() == 2) {
            switch (pathListesi.getSelectedIndex()) {
                case 0:
                    textAreaPaths.append("\n1.yol: " + MainMenu.kisaTut.get(0)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(0) + "\n");
                    for (int j = 0; j < sumArr[0]; j++) {
                        g2d.drawLine(koordinat[arr[0][j] - 1][0], koordinat[arr[0][j] - 1][1],
                                koordinat[arr[0][j + 1] - 1][0], koordinat[arr[0][j + 1] - 1][1]);
                    }
                    break;
                case 1:
                    textAreaPaths.append("\n2.yol: " + MainMenu.kisaTut.get(1)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(1) + "\n");
                    for (int j = 0; j < sumArr[1]; j++) {
                        g2d.drawLine(koordinat[arr[1][j] - 1][0], koordinat[arr[1][j] - 1][1],
                                koordinat[arr[1][j + 1] - 1][0], koordinat[arr[1][j + 1] - 1][1]);
                    }
                    break;
                case 2:
                    textAreaPaths.append("\n3.yol Bulunmamaktadır. \n");
                    break;
                case 3:
                    textAreaPaths.append("\n4.yol Bulunmamaktadır. \n");
                    break;
                case 4:
                    textAreaPaths.append("\n5.yol Bulunmamaktadır. \n");
                    break;
                default:
                    System.out.println("çizilemedi");
            }

        } else if (MainMenu.kisaTut.size() == 1) {
            switch (pathListesi.getSelectedIndex()) {
                case 0:
                    textAreaPaths.append("\n1.yol: " + MainMenu.kisaTut.get(0)
                            + "\nKatedilen yol: " + MainMenu.toplamYol.get(0) + "\n");
                    for (int j = 0; j < sumArr[0]; j++) {
                        g2d.drawLine(koordinat[arr[0][j] - 1][0], koordinat[arr[0][j] - 1][1],
                                koordinat[arr[0][j + 1] - 1][0], koordinat[arr[0][j + 1] - 1][1]);
                    }
                    break;
                case 1:
                    textAreaPaths.append("\n2.yol Bulunmamaktadır. \n");
                    break;
                case 2:
                    textAreaPaths.append("\n3.yol Bulunmamaktadır. \n");
                    break;
                case 3:
                    textAreaPaths.append("\n4.yol Bulunmamaktadır. \n");
                    break;
                case 4:
                    textAreaPaths.append("\n5.yol Bulunmamaktadır. \n");
                    break;    
                default:
                    System.out.println("çizilemedi");
            }

        } else {
            System.out.println("En kısa yol bulunamadı.");
        }


    }//GEN-LAST:event_okButtonMouseClicked

    private void ekraniTemizleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ekraniTemizleActionPerformed

        repaint();
    }//GEN-LAST:event_ekraniTemizleActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PathFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PathFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PathFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PathFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PathFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ekraniTemizle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mapLabel;
    private javax.swing.JButton okButton;
    private java.awt.List pathListesi;
    private javax.swing.JTextField secim;
    private javax.swing.JTextArea textAreaPaths;
    // End of variables declaration//GEN-END:variables
}
